<!-- no title top of each slide -->
```{r setup, include=FALSE}
knitr::opts_chunk$set(eval = FALSE, echo = TRUE)
```

BURN - 30th meetup
========================================================
author: Ildikó Czeller -- Data Analyst @Emarsys
css: custom.css
date: 2016-12-14
autosize: true

# shiny modules in practice

demo data
========================================================
title: false
# demo data from worldbank

## [world development indicators](http://data.worldbank.org/data-catalog/world-development-indicators)

## accessed by ~~WDI~~ R package

Shiny: web framework for R
========================================================
title: false
# Shiny: web framework
```{r}
shinyServer(function(input, output) {
    
    output$my_plot <- renderPlot({
        ggplot(mtcars, aes(wt, mpg)) +
        geom_point()
    })
})
```
```{r}
shinyUI(fluidPage(
  
  plotOutput('my_plot')
))
```

motivation
========================================================
title: false
# motivation
<!-- repeating ui widgets -->
<!-- manually keeping record of ui - server matches -->

```{r}
selectInput('population_country', ...),
selectInput('trendline_country', ...)
```

```{r}
collectData(input$population_country, ...)
filterData(input$population_country, ...)

collectData(input$trendline_country, ...)
filterData(input$trendline_country, ...)
```

simple functions: not enough
=======================================================
title: false
# with simple functions
```{r}
countrySelector <- function(id) {
  selectInput(str_c('id', '_country'), ...)
}
countrySelector('population'),
countrySelector('trendline')
```
```{r}
collectData(input$population_country, ...)
filterData(input$population_country, ...)

collectData(input$trendline_country, ...)
filterData(input$trendline_country, ...)
```

<!-- pass whole input object? -->
<!-- manually adding prefix: error-prone -->

solution
========================================================
title: false
# (a) solution: modules

matching server and ui
========================================================
title: false
# matching server and ui
```{r}
dataPeeker <- function(input,output,session){
  
  output$raw_data <- renderDataTable({
    pullBaseWdiData(input$series_name)
  })
}
```
```{r}
dataPeekerUI <- function(id) {
  ns <- NS(id)
  dataTableOutput(ns('raw_data'))
}
```

matching server and ui
========================================================
title: false
# matching server and ui
## server
```{r}
callModule(dataPeeker, 'population')
callModule(dataPeeker, 'life_expectancy')
```

## ui
```{r}
dataPeekerUI('population'),
dataPeekerUI('life_expectancy')
```

<!-- convention in function names -->
<!-- must be called with same id, namely ~~population~~ -->

namespace
========================================================
title: false
# `ns <- NS(id)`
# short for "namespace"
<!--Miért az idézőjelek? mert ez nem valódi namespace -->
# id: unique within namespace
<!-- namespacen belül rövi névvel, kívül hosszú névvel tudsz egy elemre hivatkozni -->
<!-- ns: function which appends prefix -->
```{r}
id <- 'population'
ns <- NS(id)
ns('country') = 'population-country'
ns('year') = 'population-year'
```

access ui element from outside
========================================================
title: false
# access ui elements

```{r}
yearSelectorUI <- function(id) {
  numericInput(
    NS(id)('year'), 'Year:', value = 2000
  )
}
```
```{r}
yearSelectorUI('global')
```

```{r}
global_year <- reactive({
  input$`global-year`
})
```

same id, multiple modules 1
========================================================
title: false
# multiple modules, one id
```{r}
countryShowerUI <- function(id) {
  checkboxInput(
    NS(id)('country'), 'show countries'
  )
}
yearSelectorUI <- function(id) {
  numericInput(
    NS(id)('year'), 'Year:', value = 2000
  )
}
```
```{r}
countryShowerUI('population')
yearSelectorUI('population') 
checkboxInput('population-x', 'X:')
```
<!-- létrejött a 3 ui változó -->
<!-- innentől ha benne vannak a scopeban, tudok rájuk hivatkozni: modulon belül és modulon kívül-->
same id, multiple modules 2
========================================================
title: false
# multiple modules, one id
```{r}
filters <- function(input, output, session) {
  output$text <- renderText({
    str_c(
      input$country,
      input$year,
      input$x
    )
  })
}
```
```{r}
callModule(filters, 'population')
```

pass reactive to module
========================================================
title: false
# pass reactive to module
```{r}
global_year <- reactive({
  input$`global-year`
})

callModule(dataPeeker, 'popul', global_year)
```
```{r}
dataPeeker <- function(..., year) {
  
  output$dt <- renderDataTable({
    data() %>% 
      filterForYear(year())
  })
}
```

return reactive from module
========================================================
title: false
# return reactive
```{r}
country <- function(...) {
  # ...
  # this is returned: last reactive
  chosen_country <- reactive({
    input$country
  })
}

p_country <- callModule(country, 'popul')

output$popul_chosen_country <- renderText({
  p_country()
})
```

uiOutput & renderUI
========================================================
title: false
# dynamic UI
```{r}
country <- function(input,output,session) {
  
  output$country_selector <- renderUI({
    
    ns <- session$ns
    selectInput(
      ns('country'), '?', choices = countries
    )
  })
  
  chosen_country <- reactive({
    input$country
  })
}
```

module hierarchy
=======================================================
title: false
# hierarchy
## nest one copy 
## nest multiple copies

nest one copy
=======================================================
title: false
## nest one copy: like simple functions
```{r}
nsText <- function(input, output, sesion) {
  # ...
}
test <- function(input, output, session) {
  # ...
  nsText(input, output, session)
}
```
```{r}
callModule(test, 'x')
```
## same effect as calling both from outside

```{r}
callModule(test, 'x')
callModule(nsText,'x')
```
<!-- but less code inside and outside as well-->

nest multiple copies 1
========================================================
title: false
# nest multiple copies
```{r}
distributionUI <- function(id) {
    ns <- NS(id)
    tagList(
        distributionPlotUI(ns('1980')),
        distributionPlotUI(ns('2000'))
    )
}
```

```{r}
distributionUI('births_per_woman')
distributionUI('GDP')
```

nest multiple modules 2
========================================================
title: false
# nest multiple copies
```{r}
distribution <- function(...) {
    callModule(distributionPlot, '1980')
    callModule(distributionPlot, '2000')
}
```

```{r}
callModule(distribution, 'births_per_woman')
callModule(distribution, 'GDP')
```

Take-aways
========================================================

# flexible 
<!-- : more than a function-->
# reusable
# clear dependencies
# enables hierarchy

========================================================
title: false
type: section
# Thank you!

## Reference:
## <https://github.com/czeildi/burn-meetup-shiny-modules>
## <https://twitter.com/czeildi>
