<!-- no title top of each slide -->
```{r setup, include=FALSE}
knitr::opts_chunk$set(eval = FALSE, echo = TRUE)
```

BURN - 30th meetup
========================================================
title: false
author: Ildik√≥ Czeller -- Data Analyst @Emarsys
css: custom.css
date: 2016-12-14
autosize: true

# shiny modules in practice

Shiny: web framework for R
========================================================

### server side
```{r}
shinyServer(function(input, output) {
    
    output$my_plot <- renderPlot({
        ggplot(mtcars, aes(wt, mpg)) +
        geom_point()
    })
})
```
### ui side
```{r}
shinyUI(fluidPage(
  
  title = 'Plot',
  plotOutput('my_plot')
))
```

demo data
========================================================

## world population & life expectancy data
-  data for every country yearly
-  data from world bank
- http://data.worldbank.org/data-catalog/world-development-indicators
- accessed by ~~WDI~~ R package

matching server and ui
========================================================

### server module
```{r}
dataPeeker <- function(input,output,session){
  
  output$raw_data <- renderDataTable({
    # simple name of input fields
    pullBaseWdiData(input$series_name)
  })
}
```

### ui module
```{r}
dataPeekerUI <- function(id) {
  ns <- NS(id)
  # ns('any_text') == `id`-any_text
  dataTableOutput(ns('raw_data'))
}
```


matching server and ui
========================================================

## server side
```{r}
callModule(dataPeeker, 'population')
callModule(dataPeeker, 'life_expectancy')
```

## ui side
```{r}
dataPeekerUI('population'),
dataPeekerUI('life_expectancy')
```

- `dataPeeker` <--> `dataPeekerUI` : good convention
- called with same id, namely ~~population~~: must have

same id, multiple modules 1
========================================================

## ui side
```{r}
countryShowerUI <- function(id) {
  checkboxInput(
    NS(id)('country'), 'show countries'
  )
}
yearSelectorUI <- function(id) {
  numericInput(
    NS(id)('year'), 'Year:', value = 2000
  )
}
```
```{r}
countryShowerUI('population')
yearSelectorUI('population') 
checkboxInput('population-x', 'X:')
```

same id, multiple modules 2
========================================================

## server side
```{r}
filters <- function(input, output, session) {
  output$text <- renderText({
    str_c(
      input$country,
      ' and ',
      input$year,
      ' and ',
      input$x
    )
  })
}
```
```{r}
callModule(filters, 'population')
```

access ui element from outside
========================================================

## ui side
```{r}
yearSelectorUI('global')
```
## server side
```{r}
global_year <- reactive({
  
  input$`global-year`
  
})
```

pass reactive to module
========================================================

## server side
```{r}
global_year <- reactive({
  input$`global-year`
})

callModule(dataPeeker, 'popul', global_year)
```
```{r}
dataPeeker <- function(..., year) {
  
  output$dt <- renderDataTable({
    data() %>% 
      filterForYear(year())
  })
}
```

uiOutput & renderUI
========================================================

```{r}
country <- function(...) {
  
  output$country_selector <- renderUI({
    
    ns <- session$ns
    
    selectInput(
      ns('country'), '?', choices = countries
    )
  })
  
  chosen_country <- reactive({
    input$country
  })
}
```

return reactive from module
========================================================

```{r}
country <- function(...) {
  # ...
  # this is returned: last reactive
  chosen_country <- reactive({
    input$country
  })
}

p_country <- callModule(country, 'popul')

output$popul_chosen_country <- renderText({
  p_country()
})
```

nesting modules 1
========================================================

## ui side
```{r}
distributionUI <- function(id) {
    ns <- NS(id)
    tagList(
        distributionPlotUI(ns('1980')),
        distributionPlotUI(ns('2000'))
    )
}
```

```{r}
distributionUI('births_per_woman')
distributionUI('GDP')
```

nesting modules 2
========================================================

## server side
```{r}
distribution <- function(...) {
    callModule(distributionPlot, '1980')
    callModule(distributionPlot, '2000')
}
```

```{r}
callModule(distribution, 'births_per_woman')
callModule(distribution, 'GDP')
```

ways of calling a module
=======================================================
```{r}
nsText <- function(...) {
  # ...
}
test <- function(...) {
  # ...
  nsText(
    input,
    output,
    session
  )
}
```
```{r}
callModule(test, 'x')
```
***
```{r}
nsText <- function(...) {
  # ...
}
test <- function(...) {
  # ...
}
```
```{r}
callModule(test,'x')
callModule(nsText,'x')
```

wrap-up
========================================================

- pattern of ui & server code
- flexible
- reusable
- clear dependencies

========================================================
title: false
type: section
# Thank you!

## Reference
- <https://github.com/czeildi/burn-meetup-shiny-modules>
- <https://twitter.com/czeildi>
